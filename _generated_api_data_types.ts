/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/participations": {
    get: operations["find_1"];
    post: operations["updateOrCreate"];
  };
  "/api/users/{userId}": {
    get: operations["find"];
  };
  "/api/reminders/trigger": {
    get: operations["triggerReminders"];
  };
  "/api/reminders/findAllRemindersByEventId/{eventId}": {
    get: operations["findAllRemindersByEventId"];
  };
  "/api/participations/registration": {
    get: operations["registerToEvent"];
  };
  "/api/logentry/findEntriesByEventId/{eventId}": {
    get: operations["findLogEntriesByEventId"];
  };
  "/api/groups/{groupId}": {
    get: operations["findById"];
  };
  "/api/groups/findUsersByGroup/{groupId}": {
    get: operations["findUsersByGroup"];
  };
  "/api/groups/all": {
    get: operations["findAllGroups"];
  };
  "/api/events/{eventId}": {
    get: operations["find_2"];
  };
  "/api/events/findUpcomingEventsByUser/{userId}": {
    get: operations["findUpcomingEventsByUser"];
  };
  "/api/events/findAllUpcomingEventsByGroupId/{groupId}": {
    get: operations["findAllUpComingEventsByGroup"];
  };
  "/api/events/findAllEventsByGroupId/{groupId}": {
    get: operations["findAllByGroup"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Participation: {
      /** Format: int64 */
      id?: number;
      /** @enum {string} */
      status?: "On" | "Maybe" | "Off" | "Unregistered";
      /** Format: int32 */
      numberOfParticipants?: number;
      comment?: string;
      /** Format: int64 */
      userId?: number;
      /** Format: int64 */
      eventId?: number;
      /** Format: date-time */
      signUpTime?: string;
    };
    User: {
      /** Format: int64 */
      id?: number;
      firstName?: string;
      lastName?: string;
      comment?: string;
      email?: string;
      phone?: string;
      /** @enum {string} */
      permission?: "Administrator" | "NormalUser";
      /** @enum {string} */
      imageProvider?: "Gravatar" | "Cloudinary";
      imageVersion?: string;
      providerKey?: string;
    };
    Reminder: {
      /** Format: int64 */
      id?: number;
      /** Format: int64 */
      eventId?: number;
      /** Format: date */
      dateToRemind?: string;
    };
    ApplicationContext: {
      parent?: components["schemas"]["ApplicationContext"];
      id?: string;
      displayName?: string;
      autowireCapableBeanFactory?: components["schemas"]["AutowireCapableBeanFactory"];
      applicationName?: string;
      /** Format: int64 */
      startupDate?: number;
      environment?: components["schemas"]["Environment"];
      /** Format: int32 */
      beanDefinitionCount?: number;
      beanDefinitionNames?: (string)[];
      parentBeanFactory?: components["schemas"]["BeanFactory"];
      classLoader?: {
        name?: string;
        registeredAsParallelCapable?: boolean;
        parent?: {
          name?: string;
          registeredAsParallelCapable?: boolean;
          unnamedModule?: {
            name?: string;
            classLoader?: {
              name?: string;
              registeredAsParallelCapable?: boolean;
              definedPackages?: ({
                  name?: string;
                  annotations?: (Record<string, never>)[];
                  declaredAnnotations?: (Record<string, never>)[];
                  sealed?: boolean;
                  specificationTitle?: string;
                  specificationVersion?: string;
                  specificationVendor?: string;
                  implementationTitle?: string;
                  implementationVersion?: string;
                  implementationVendor?: string;
                })[];
              defaultAssertionStatus?: boolean;
            };
            descriptor?: {
              open?: boolean;
              automatic?: boolean;
            };
            named?: boolean;
            annotations?: (Record<string, never>)[];
            declaredAnnotations?: (Record<string, never>)[];
            packages?: (string)[];
            layer?: Record<string, never>;
          };
          definedPackages?: ({
              name?: string;
              annotations?: (Record<string, never>)[];
              declaredAnnotations?: (Record<string, never>)[];
              sealed?: boolean;
              specificationTitle?: string;
              specificationVersion?: string;
              specificationVendor?: string;
              implementationTitle?: string;
              implementationVersion?: string;
              implementationVendor?: string;
            })[];
          defaultAssertionStatus?: boolean;
        };
        unnamedModule?: {
          name?: string;
          classLoader?: {
            name?: string;
            registeredAsParallelCapable?: boolean;
            definedPackages?: ({
                name?: string;
                annotations?: (Record<string, never>)[];
                declaredAnnotations?: (Record<string, never>)[];
                sealed?: boolean;
                specificationTitle?: string;
                specificationVersion?: string;
                specificationVendor?: string;
                implementationTitle?: string;
                implementationVersion?: string;
                implementationVendor?: string;
              })[];
            defaultAssertionStatus?: boolean;
          };
          descriptor?: {
            open?: boolean;
            automatic?: boolean;
          };
          named?: boolean;
          annotations?: (Record<string, never>)[];
          declaredAnnotations?: (Record<string, never>)[];
          packages?: (string)[];
          layer?: Record<string, never>;
        };
        definedPackages?: ({
            name?: string;
            annotations?: (Record<string, never>)[];
            declaredAnnotations?: (Record<string, never>)[];
            sealed?: boolean;
            specificationTitle?: string;
            specificationVersion?: string;
            specificationVendor?: string;
            implementationTitle?: string;
            implementationVersion?: string;
            implementationVendor?: string;
          })[];
        defaultAssertionStatus?: boolean;
      };
    };
    AutowireCapableBeanFactory: Record<string, never>;
    BeanFactory: Record<string, never>;
    Environment: {
      activeProfiles?: (string)[];
      defaultProfiles?: (string)[];
    };
    FilterRegistration: {
      servletNameMappings?: (string)[];
      urlPatternMappings?: (string)[];
      name?: string;
      className?: string;
      initParameters?: {
        [key: string]: string | undefined;
      };
    };
    HttpStatusCode: {
      error?: boolean;
      is4xxClientError?: boolean;
      is5xxServerError?: boolean;
      is1xxInformational?: boolean;
      is2xxSuccessful?: boolean;
      is3xxRedirection?: boolean;
    };
    JspConfigDescriptor: {
      jspPropertyGroups?: (components["schemas"]["JspPropertyGroupDescriptor"])[];
      taglibs?: (components["schemas"]["TaglibDescriptor"])[];
    };
    JspPropertyGroupDescriptor: {
      buffer?: string;
      deferredSyntaxAllowedAsLiteral?: string;
      trimDirectiveWhitespaces?: string;
      errorOnUndeclaredNamespace?: string;
      elIgnored?: string;
      errorOnELNotFound?: string;
      pageEncoding?: string;
      scriptingInvalid?: string;
      includePreludes?: (string)[];
      includeCodas?: (string)[];
      defaultContentType?: string;
      urlPatterns?: (string)[];
      isXml?: string;
    };
    RedirectView: {
      applicationContext?: components["schemas"]["ApplicationContext"];
      servletContext?: components["schemas"]["ServletContext"];
      contentType?: string;
      requestContextAttribute?: string;
      staticAttributes?: {
        [key: string]: Record<string, never> | undefined;
      };
      exposePathVariables?: boolean;
      exposeContextBeansAsAttributes?: boolean;
      exposedContextBeanNames?: (string)[];
      beanName?: string;
      url?: string;
      contextRelative?: boolean;
      http10Compatible?: boolean;
      exposeModelAttributes?: boolean;
      encodingScheme?: string;
      statusCode?: components["schemas"]["HttpStatusCode"];
      expandUriTemplateVariables?: boolean;
      propagateQueryParams?: boolean;
      hosts?: (string)[];
      propagateQueryProperties?: boolean;
      redirectView?: boolean;
      attributes?: {
        [key: string]: string | undefined;
      };
      attributesCSV?: string;
      attributesMap?: {
        [key: string]: Record<string, never> | undefined;
      };
    };
    ServletContext: {
      classLoader?: {
        name?: string;
        registeredAsParallelCapable?: boolean;
        definedPackages?: ({
            name?: string;
            annotations?: (Record<string, never>)[];
            declaredAnnotations?: (Record<string, never>)[];
            sealed?: boolean;
            specificationTitle?: string;
            specificationVersion?: string;
            specificationVendor?: string;
            implementationTitle?: string;
            implementationVersion?: string;
            implementationVendor?: string;
          })[];
        defaultAssertionStatus?: boolean;
      };
      /** Format: int32 */
      majorVersion?: number;
      /** Format: int32 */
      minorVersion?: number;
      defaultSessionTrackingModes?: ("COOKIE" | "URL" | "SSL")[];
      effectiveSessionTrackingModes?: ("COOKIE" | "URL" | "SSL")[];
      requestCharacterEncoding?: string;
      responseCharacterEncoding?: string;
      contextPath?: string;
      /** Format: int32 */
      effectiveMajorVersion?: number;
      /** Format: int32 */
      effectiveMinorVersion?: number;
      serverInfo?: string;
      servletContextName?: string;
      servletRegistrations?: {
        [key: string]: components["schemas"]["ServletRegistration"] | undefined;
      };
      filterRegistrations?: {
        [key: string]: components["schemas"]["FilterRegistration"] | undefined;
      };
      sessionCookieConfig?: components["schemas"]["SessionCookieConfig"];
      sessionTrackingModes?: ("COOKIE" | "URL" | "SSL")[];
      jspConfigDescriptor?: components["schemas"]["JspConfigDescriptor"];
      virtualServerName?: string;
      /** Format: int32 */
      sessionTimeout?: number;
      attributeNames?: Record<string, never>;
      initParameterNames?: Record<string, never>;
    };
    ServletRegistration: {
      mappings?: (string)[];
      runAsRole?: string;
      name?: string;
      className?: string;
      initParameters?: {
        [key: string]: string | undefined;
      };
    };
    SessionCookieConfig: {
      domain?: string;
      /** Format: int32 */
      maxAge?: number;
      name?: string;
      path?: string;
      attributes?: {
        [key: string]: string | undefined;
      };
      /** @deprecated */
      comment?: string;
      httpOnly?: boolean;
      secure?: boolean;
    };
    TaglibDescriptor: {
      taglibURI?: string;
      taglibLocation?: string;
    };
    LogEntry: {
      /** Format: int64 */
      Id?: number;
      /** Format: int64 */
      eventId?: number;
      message?: string;
      /** Format: date-time */
      when?: string;
      /** Format: int64 */
      id?: number;
    };
    Group: {
      /** Format: int64 */
      id?: number;
      name?: string;
      description?: string;
      mailFrom?: string;
      mailSubjectPrefix?: string;
    };
    Event: {
      /** Format: int64 */
      id?: number;
      group?: components["schemas"]["Group"];
      name?: string;
      description?: string;
      /** Format: date-time */
      startTime?: string;
      /** Format: date-time */
      endTime?: string;
      /** Format: date */
      lastSignUpDate?: string;
      venue?: string;
      allowExtraFriends?: boolean;
      /** @enum {string} */
      eventStatus?: "Created" | "Cancelled";
      /** Format: int32 */
      maxParticipants?: number;
      cancellationReason?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  find_1: {
    parameters: {
      query: {
        userId: number;
        eventId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Participation"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  updateOrCreate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Participation"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Participation"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  find: {
    parameters: {
      path: {
        userId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["User"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  triggerReminders: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": (components["schemas"]["Reminder"])[];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  findAllRemindersByEventId: {
    parameters: {
      path: {
        eventId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": (components["schemas"]["Reminder"])[];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  registerToEvent: {
    parameters: {
      query: {
        userId: number;
        eventId: number;
        pStatus: "On" | "Maybe" | "Off" | "Unregistered";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["RedirectView"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  findLogEntriesByEventId: {
    parameters: {
      path: {
        eventId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": (components["schemas"]["LogEntry"])[];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  findById: {
    parameters: {
      path: {
        groupId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Group"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  findUsersByGroup: {
    parameters: {
      path: {
        groupId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": (components["schemas"]["User"])[];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  findAllGroups: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": (components["schemas"]["Group"])[];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  find_2: {
    parameters: {
      path: {
        eventId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Event"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  findUpcomingEventsByUser: {
    parameters: {
      path: {
        userId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": (components["schemas"]["Event"])[];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  findAllUpComingEventsByGroup: {
    parameters: {
      path: {
        groupId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": (components["schemas"]["Event"])[];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  findAllByGroup: {
    parameters: {
      path: {
        groupId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": (components["schemas"]["Event"])[];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
}
